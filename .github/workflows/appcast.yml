name: Generate and Publish Appcast

on:
  workflow_call:
    secrets:
      SPARKLE_PRIVATE_KEY:
        required: true

jobs:
  build:
    runs-on: macos-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get latest release info
      id: get_release
      uses: actions/github-script@v7
      with:
        script: |
          const release = await github.rest.repos.getLatestRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });

          const asset = release.data.assets[0];
          const version = release.data.tag_name.replace(/^v/, '');
          core.setOutput('version', version);
          core.setOutput('asset_url', asset.browser_download_url);
          core.setOutput('asset_name', asset.name);

          const {body} = release.data;

          const criticalMarker = '<!-- CRITICAL_UPDATE -->';
          const isCritical = body.includes(criticalMarker);
          core.setOutput('is_critical', isCritical);

          const cleanedReleaseNotes = body.replace(criticalMarker, '');
          core.setOutput('release_notes', cleanedReleaseNotes);

    - name: Download release asset
      run: |
        mkdir archives
        curl --location --output "archives/${{ steps.get_release.outputs.asset_name }}" "${{ steps.get_release.outputs.asset_url }}"

    - name: Convert Markdown to HTML
      run: |
        ASSET_NAME="${{ steps.get_release.outputs.asset_name }}"
        echo "${{ steps.get_release.outputs.release_notes }}" | npx marked > "archives/${ASSET_NAME%.zip}.html"

    - name: Generate appcast.xml
      run: |
        curl --location https://github.com/sparkle-project/Sparkle/releases/download/2.6.4/Sparkle-2.6.4.tar.xz | tar --extract --xz

        CRITICAL_UPDATE_ARGUMENT=""
        if [ "${{ steps.get_release.outputs.is_critical }}" == "true" ]; then
          CRITICAL_UPDATE_ARGUMENT="--critical-update-version ${{ steps.get_release.outputs.version }}"
        fi

        echo "${{ secrets.SPARKLE_PRIVATE_KEY }}" | ./bin/generate_appcast \
          --download-url-prefix "${{ github.server_url }}/${{ github.repository }}/releases/download/v${{ steps.get_release.outputs.version }}/" \
          --embed-release-notes \
          --ed-key-file - \
          $CRITICAL_UPDATE_ARGUMENT \
          archives
        mkdir _site
        mv archives/appcast.xml _site/appcast.xml

    - name: Setup GitHub Pages
      uses: actions/configure-pages@v5

    - name: Upload appcast.xml
      uses: actions/upload-pages-artifact@v3

    - name: Check if rebuild is needed
      id: check_rebuild
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          echo "rebuild_needed=true" >> $GITHUB_OUTPUT
        else
          echo "rebuild_needed=false" >> $GITHUB_OUTPUT
        fi

    - name: Trigger GitHub Pages rebuild
      if: steps.check_rebuild.outputs.rebuild_needed == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/pages/builds

  deploy:
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
